
// //Aquí hay un ejemplo básico de cómo podrías utilizar Redux y redux-promise juntos para manejar promesas en tu store:


// // actions.js
// export const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';
// export const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';
// export const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';

// export const fetchDataRequest = () => ({
//   type: FETCH_DATA_REQUEST,
// });

// export const fetchDataSuccess = data => ({
//   type: FETCH_DATA_SUCCESS,
//   data,
// });

// export const fetchDataFailure = error => ({
//   type: FETCH_DATA_FAILURE,
//   error,
// });

// // api.js
// export const fetchData = () => {
//   return fetch('https://some-api.com/data')
//     .then(response => response.json())
//     .then(data => data)
//     .catch(error => error);
// };

// // reducer.js
// import {
//   FETCH_DATA_REQUEST,
//   FETCH_DATA_SUCCESS,
//   FETCH_DATA_FAILURE,
// } from './actions';

// const initialState = {
//   loading: false,
//   data: [],
//   error: null,
// };

// const reducer = (state = initialState, action) => {
//   switch (action.type) {
//     case FETCH_DATA_REQUEST:
//       return {
//         ...state,
//         loading: true,
//       };
//     case FETCH_DATA_SUCCESS:
//       return {
//         ...state,
//         loading: false,
//         data: action.data,
//       };
//     case FETCH_DATA_FAILURE:
//       return {
//         ...state,
//         loading: false,
//         error: action.error,
//       };
//     default:
//       return state;
//   }
// };

// export default reducer;

// // store.js
// import { createStore, applyMiddleware } from 'redux';
// import promiseMiddleware from 'redux-promise';
// import reducer from './reducer';

// const store = createStore(reducer, applyMiddleware(promiseMiddleware));

// export default store;

// // component.js
// import React, { useEffect } from 'react';
// import { connect } from 'react-redux';
// import { fetchDataRequest, fetchDataSuccess, fetchDataFailure } from './actions';
// import { fetchData } from './api';

// const Component = ({ dispatch, data, error, loading }) => {
//   useEffect(() => {
//     dispatch(fetchDataRequest());
//     fetchData()
//       .then(data => dispatch(fetchDataSuccess(data)))
//       .catch(error => dispatch(fetchDataFailure(error)));
//   }, [dispatch]);

//   if (loading) {
//     return <p>Loading...</p>;
//   }

//   if (error) {
//     return <p>{error.message}</p>;
//   }

//   return (
//     <ul>
//     {data.map(item => (
//       <li key={item.id}>{item.name}</li>
//     ))}
//   </ul>
// );
// };

// const mapStateToProps = state => ({
// data: state.data,
// error: state.error,
// loading: state.loading,
// });

// export default connect(mapStateToProps)(Component);


// // Este ejemplo muestra cómo usar las acciones, el api, el reducer y el store juntos para manejar promesas en tu aplicación. También muestra cómo conectar tu componente React con el store de Redux para acceder a los datos de estado.




